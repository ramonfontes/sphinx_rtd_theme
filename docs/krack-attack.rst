************
Key Reinstallation Attacks
************


How to perform the Key Reinstallation Attack
-------------

.. raw:: html

    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; height: auto;">
        <iframe src="//www.youtube.com/embed/XbUxH5zQPTc" frameborder="0" allowfullscreen style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></iframe>
    </div>

.. Note::
  **Inspired in https://www.krackattacks.com/**
  
  **Requirements:** 
  
  - Mininet-WiFi - https://github.com/intrig-unicamp/mininet-wifi
  - Ryu - https://github.com/ramonfontes/ryu (branch dev)
  - Hostap - http://w1.fi/hostap.git (commit df949062017bacae8095edeb73647ef97e7566bc )
  - libnl-route-3-dev

.. code:: console

   ~$ sudo apt install libnl-route-3-dev
   ~$ git clone http://w1.fi/hostap.git
   ~$ cd hostap
   ~/hostap$ git reset df949062017
   ~/hostap$ cd wpa_supplicant/
   ~/hostap/wpa_supplicant$ cp defconfig .config
   ~/hostap/wpa_supplicant$ sudo make install
   ~/hostap/wpa_supplicant$ cd ../hostapd
   
   # uncomment the line with CONFIG_IEEE80211R=y in defconfig
   ~/hostap/hostapd$ cp defconfig .config
   ~/hostap/hostapd$ sudo make install   
   

First of all trying to identify the network topology that will be generated by the code below:

.. code:: python

  #!/usr/bin/python

  """This code tests if APs are affected by CVE-2017-13082 (KRACK attack) and
  determine whether an implementation is vulnerable to attacks."""

  __author__ = "Ramon Fontes, Hedertone Almeida, and Christian Rothenberg"
  __credits__ = ["https://github.com/vanhoefm/krackattacks-test-ap-ft"]

  from mininet.node import RemoteController
  from mininet.log import setLogLevel, info
  from mn_wifi.net import MininetWithControlWNet
  from mn_wifi.node import UserAP
  from mn_wifi.cli import CLI
  from mn_wifi.link import wmediumd
  from mn_wifi.wmediumdConnector import interference
  import os


  def topology():

      info("*** Shutting down any controller running on port 6653\n")
      os.system('sudo fuser -k 6653/tcp')

      "Create a network."
      net = MininetWithControlWNet(controller=RemoteController,
                                   link=wmediumd, wmediumd_mode=interference)

      info("*** Creating nodes\n")
      net.addStation('sta1', ip='10.0.0.1/8', position='20,0,0', inNamespace=False,
                     #scan_freq='2412', freq_list='2412',
                     bgscan_threshold=-60, s_inverval=5, l_interval=10)
      ap1 = net.addAccessPoint('ap1', mac='02:00:00:00:00:01',
                               ssid='handover', mode='g', channel='1', ieee80211r='yes',
                               mobility_domain='a1b2', passwd='123456789a', encrypt='wpa2',
                               position='10,30,0', datapath='user')
      ap2 = net.addAccessPoint('ap2', mac='02:00:00:00:00:02',
                               ssid='handover', mode='g', channel='6', ieee80211r='yes',
                               mobility_domain='a1b2', passwd='123456789a', encrypt='wpa2',
                               position='100,30,0', datapath='user')
      c1 = net.addController('c1', controller=RemoteController, port=6653)

      info("*** Configuring Propagation Model\n")
      net.setPropagationModel(model="logDistance", exp=3.5)

      info("*** Configuring wifi nodes\n")
      net.configureWifiNodes()

      info("*** Linking nodes\n")
      net.addLink(ap1, ap2)

      'plotting graph'
      net.plotGraph(min_x=-100, min_y=-100, max_x=200, max_y=200)

      info("*** Starting network\n")
      net.build()
      c1.start()
      ap1.start([c1])
      ap2.start([c1])

      ap1.setIP('10.0.0.101/8', intf='ap1-wlan1')
      ap2.setIP('10.0.0.102/8', intf='ap2-wlan1')
      os.system('ip link set hwsim0 up')

      info("*** Running CLI\n")
      CLI(net)

      info("*** Stopping network\n")
      net.stop()

  if __name__ == '__main__':
      setLogLevel('info')
      topology()


So considering that you have named the code above as ```krack-attack```, run it as follows:

.. code:: console

    sudo python krack-attack.py
    
.. warning:: 

    O tempo de execução será maior se você estiver executando o código acima pela primeira vez, pois uma imagem gravada em conta no Docker será carregada na VM.
    
De acordo com a topologia acima, `sta1` deverá estar conectado ao ponto de acesso `ap1`. Voce pode confirmar esta afirmação utilizando o comando abaixo:

.. code:: console

    sta1 iw dev sta1-wlan0 link
    Connected to 02:00:00:00:03:00 (on sta1-wlan0)
          SSID: simplewifi
          freq: 2412
          RX: 62468 bytes (1373 packets)
          TX: 144 bytes (4 packets)
          signal: -36 dBm
          tx bitrate: 1.0 MBit/s

          bss flags:	short-slot-time
          dtim period:	2
          beacon int:	100
    
Na topologia do código acima, `sta1` será a vítima e `sta2` o atacante. Além disso, o ponto de acesso `ap1` será o ponto de acesso real e o ataque será feito através do ponto de acesso `ap2`.


.. admonition:: Passo a ser realizado
 
   - Neste momento, você deverá configurar ap2 de forma que ele permita o encaminhamento de dados entre a sua interface sem fio e sua interface com fio, de forma que a vítima possa ter acesso à Internet.
   - Execute também o hostapd em `ap2` para que a vítima possa receber sinal do ponto de acesso falso.
   

